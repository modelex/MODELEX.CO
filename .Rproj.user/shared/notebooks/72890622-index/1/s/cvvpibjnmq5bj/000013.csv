"0","#' ## A Regression Model"
"0","#' "
"0","#' I find a regression model to be more applicable/intuitive for my needs, so"
"0","#' provide an example for that case."
"0","#' "
"0","#' "
"0","#' ### Data setup"
"0",""
"0","set.seed(8675309)"
"0","N = 500"
"0","npreds = 5"
"0","X = cbind(1, matrix(rnorm(N * npreds), ncol = npreds))"
"0","beta = runif(ncol(X), -1, 1)"
"0","y = X %*% beta + rnorm(nrow(X))"
"0",""
"0",""
"0","#' Least squares loss function."
"0",""
"0","f = function(b) {"
"0","  crossprod(y - X %*% b)[,1]  # if using optimx need scalar"
"0","}"
"0",""
"0","# lm estimates"
"0","lm.fit(X, y)$coef"
"1","         x1 "
"1","         x2 "
"1","         x3 "
"1","         x4 "
"1","         x5 "
"1","         x6 "
"1","
"
"1","-0.96214657 "
"1"," 0.59432481 "
"1"," 0.04864576 "
"1"," 0.27573466 "
"1"," 0.97525840 "
"1","-0.07470287 "
"1","
"
"0","nm_result = nelder_mead("
"0","  f, "
"0","  runif(ncol(X)), "
"0","  max_iter = 2000,"
"0","  no_improve_thr = 1e-12,"
"0","  verbose = FALSE"
"0",")"
"0",""
"0","#' ### Comparison"
"0","#' Compare to `optimx`."
"0",""
"0","opt_out = optimx::optimx("
"0","  runif(ncol(X)),"
"0","  fn = f,  # model function"
"0","  method  = 'Nelder-Mead',"
"0","  control = list("
"0","    alpha = 1,"
"0","    gamma = 2,"
"0","    beta  = 0.5,"
"0","    #rho"
"0","    maxit  = 2000,"
"0","    reltol = 1e-12"
"0","  )"
"0",")"
"0",""
"0","rbind("
"0","  nm_func = unlist(nm_result),"
"0","  nm_optimx = opt_out[1:7]"
"0",")"
