"0","lasso <- function("
"0","  X,                   # model matrix"
"0","  y,                   # target"
"0","  lambda  = .1,        # penalty parameter"
"0","  soft    = TRUE,      # soft vs. hard thresholding"
"0","  tol     = 1e-6,      # tolerance"
"0","  iter    = 100,       # number of max iterations"
"0","  verbose = TRUE       # print out iteration number"
"0",") {"
"0","  "
"0","  # soft thresholding function"
"0","  soft_thresh <- function(a, b) {"
"0","    out = rep(0, length(a))"
"0","    out[a >  b] = a[a > b] - b"
"0","    out[a < -b] = a[a < -b] + b"
"0","    out"
"0","  }"
"0","  "
"0","  w = solve(crossprod(X) + diag(lambda, ncol(X))) %*% crossprod(X,y)"
"0","  tol_curr = 1"
"0","  J = ncol(X)"
"0","  a = rep(0, J)"
"0","  c_ = rep(0, J)"
"0","  i = 1"
"0","  "
"0","  while (tol < tol_curr && i < iter) {"
"0","    w_old = w "
"0","    a = colSums(X^2)"
"0","    l = length(y)*lambda  # for consistency with glmnet approach"
"0","    c_ = sapply(1:J, function(j)  sum( X[,j] * (y - X[,-j] %*% w_old[-j]) ))"
"0","    if (soft) {"
"0","      for (j in 1:J) {"
"0","        w[j] = soft_thresh(c_[j]/a[j], l/a[j])"
"0","      }"
"0","    }"
"0","    else {"
"0","      w = w_old"
"0","      w[c_< l & c_ > -l] = 0"
"0","    }"
"0","    "
"0","    tol_curr = crossprod(w - w_old)  "
"0","    i = i + 1"
"0","    if (verbose && i%%10 == 0) message(i)"
"0","  }"
"0","  "
"0","  w"
"0","}"
"0",""
"0","#' # Data setup"
"0","#' "
"0","#' "
"0","set.seed(8675309)"
"0","N = 500"
"0","p = 10"
"0","X = scale(matrix(rnorm(N*p), ncol=p))"
"0","b = c(.5, -.5, .25, -.25, .125, -.125, rep(0, p-6))"
"0","y = scale(X %*% b + rnorm(N, sd=.5))"
"0","lambda = .1"
"0",""
"0",""
"0","# debugonce(lasso)"
"0",""
"0","#' Note, if `lambda=0`, result is the same as  `lm.fit`."
"0","#' "
"0","#' "
"0","result_soft = lasso("
"0","  X,"
"0","  y,"
"0","  lambda = lambda,"
"0","  tol = 1e-12,"
"0","  soft = TRUE"
"0",")"
"0",""
"0","result_hard = lasso("
"0","  X,"
"0","  y,"
"0","  lambda = lambda,"
"0","  tol    = 1e-12,"
"0","  soft   = FALSE"
"0",")"
"0",""
"0",""
"0",""
"0",""
"0","#' `glmnet` is by default a mixture of ridge and lasso penalties, setting alpha"
"0","#' = 1 reduces to lasso (alpha=0 would be ridge). We set the lambda to a couple"
"0","#' values while only wanting the one set to the same lambda value as above (s)."
"0",""
"0",""
"0","library(glmnet)"
"2","Le chargement a nécessité le package : Matrix
"
"2","
Attachement du package : ‘Matrix’

"
"2","Les objets suivants sont masqués depuis ‘package:tidyr’:

    expand, pack, unpack

"
"2","Loaded glmnet 4.1-6
"
"0","glmnet_res = coef("
"0","  glmnet("
"0","    X,"
"0","    y,"
"0","    alpha  = 1,"
"0","    lambda = c(10, 1, lambda),"
"0","    thresh = 1e-12,"
"0","    intercept = FALSE"
"0","  ),"
"0","  s = lambda"
"0",")"
"0",""
"0","library(lassoshooting)"
"2","Error in library(lassoshooting) : 
  aucun package nommé ‘lassoshooting’ n'est trouvé
"
