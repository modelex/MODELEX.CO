"0","set.seed(8675309)"
"0",""
"0","n  = 1000"
"0","x1 = rnorm(n)"
"0","x2 = rnorm(n)"
"0","y  = 1 + .5*x1 + .2*x2 + rnorm(n)"
"0","X  = cbind(Intercept = 1, x1, x2)  # model matrix"
"0",""
"0",""
"0",""
"0","#' # Gradient Descent Algorithm"
"0",""
"0",""
"0","gd = function("
"0","  par,"
"0","  X,"
"0","  y,"
"0","  tolerance = 1e-3,"
"0","  maxit     = 1000,"
"0","  stepsize  = 1e-3,"
"0","  adapt     = FALSE,"
"0","  verbose   = TRUE,"
"0","  plotLoss  = TRUE"
"0","  ) {"
"0","  "
"0","  # initialize"
"0","  beta = par; names(beta) = colnames(X)"
"0","  loss = crossprod(X %*% beta - y)"
"0","  tol  = 1"
"0","  iter = 1"
"0","  "
"0","  while(tol > tolerance && iter < maxit){"
"0","    "
"0","    LP   = X %*% beta"
"0","    grad = t(X) %*% (LP - y)"
"0","    betaCurrent = beta - stepsize * grad"
"0","    tol  = max(abs(betaCurrent - beta))"
"0","    beta = betaCurrent"
"0","    loss = append(loss, crossprod(LP - y))"
"0","    iter = iter + 1"
"0","    "
"0","    if (adapt)"
"0","      stepsize = ifelse("
"0","        loss[iter] < loss[iter - 1],  "
"0","        stepsize * 1.2, "
"0","        stepsize * .8"
"0","      )"
"0","    "
"0","    if (verbose && iter %% 10 == 0)"
"0","      message(paste('Iteration:', iter))"
"0","  }"
"0","  "
"0","  if (plotLoss)"
"0","    plot(loss, type = 'l', bty = 'n')"
"0","  "
"0","  list("
"0","    par    = beta,"
"0","    loss   = loss,"
"0","    RSE    = sqrt(crossprod(LP - y) / (nrow(X) - ncol(X))), "
"0","    iter   = iter,"
"0","    fitted = LP"
"0","  )"
"0","}"
"0",""
"0",""
"0","#' ## Run"
"0","#' "
"0","#' Set starting values."
"0",""
"0","init = rep(0, 3)"
"0",""
"0","#' For any particular data you'd have to fiddle with the `stepsize`, which could "
"0","#' be assessed via cross-validation, or alternatively one can use an"
"0","#' adaptive approach, a simple one of which is implemented in this function."
"0",""
"0","gd_result = gd("
"0","  init,"
"0","  X = X,"
"0","  y = y,"
"0","  tolerance = 1e-8,"
"0","  stepsize  = 1e-4,"
"0","  adapt     = TRUE"
"0",")"
"2","Iteration: 10
"
"2","Iteration: 20
"
"2","Iteration: 30
"
"2","Iteration: 40
"
"2","Iteration: 50
"
"2","Iteration: 60
"
"2","Iteration: 70
"
