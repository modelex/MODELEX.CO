{"title":"Cubic Splines","markdown":{"yaml":{"title":"Cubic Splines","author":"Simon-Pierre Boucher","date":"2023-02-11","categories":["R","Code","Cubic Splines"],"image":"https://www.clipartmax.com/png/middle/124-1248944_the-future-of-ai-artificial-intelligence-logo.png"},"headingText":"' # Create the data","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(tidyverse) # for processing and plotting\n\nsize = c(1.42,1.58,1.78,1.99,1.99,1.99,2.13,2.13,2.13,\n         2.32,2.32,2.32,2.32,2.32,2.43,2.43,2.78,2.98,2.98)\n\nwear = c(4.0,4.2,2.5,2.6,2.8,2.4,3.2,2.4,2.6,4.8,2.9,\n         3.8,3.0,2.7,3.1,3.3,3.0,2.8,1.7)\n\nx = size - min(size)\nx = x / max(x)\nd = data.frame(wear, x)\n\n#' Cubic spline function\nrk <- function(x, z) {\n  ((z-0.5)^2 - 1/12) * ((x-0.5)^2 - 1/12)/4 -\n    ((abs(x-z)-0.5)^4 - (abs(x-z)-0.5)^2/2 + 7/240) / 24\n}\n\n#' Generate the model matrix.\nsplX <- function(x, knots) {\n  q = length(knots) + 2                # number of parameters\n  n = length(x)                        # number of observations\n  X = matrix(1, n, q)                  # initialized model matrix\n  X[ ,2]   = x                         # set second column to x\n  X[ ,3:q] = outer(x, knots, FUN = rk) # remaining to cubic spline basis\n  X\n}\n\nsplS <- function(knots) {\n  q = length(knots) + 2\n  S = matrix(0, q, q)                         # initialize matrix\n  S[3:q, 3:q] = outer(knots, knots, FUN = rk) # fill in non-zero part\n  S\n}\n\n#' Matrix square root function. Note that there are various packages with their own.\nmatSqrt <- function(S) {\n  d  = eigen(S, symmetric = T)\n  rS = d$vectors %*% diag(d$values^.5) %*% t(d$vectors)\n  rS\n}\n\n#' Penalized fitting function.\nprsFit <- function(y, x, knots, lambda) {\n  q  = length(knots) + 2    # dimension of basis\n  n  = length(x)            # number of observations\n  Xa = rbind(splX(x, knots), matSqrt(splS(knots))*sqrt(lambda)) # augmented model matrix\n  y[(n+1):(n+q)] = 0        # augment the data vector\n  \n  lm(y ~ Xa - 1) # fit and return penalized regression spline\n}\n\n\n\n#' # Example 1\n\n\n#' Unpenalized\n#' \nknots = 1:4/5\nX = splX(x, knots)      # generate model matrix\nmod1 = lm(wear ~ X - 1) # fit model\n\nxp = 0:100/100 # x values for prediction\nXp = splX(xp, knots) # prediction matrix\n\n\n#' Visualize\n\nggplot(aes(x = x, y = wear), data = data.frame(x, wear)) +\n  geom_point(color = \"#FF5500\") +\n  geom_line(aes(x = xp, y = Xp %*% coef(mod1)),\n            data = data.frame(xp, Xp),\n            color = \"#00AAFF\") +\n  labs(x = 'Scaled Engine size', y  = 'Wear Index') +\n  theme_minimal()\n\n\n\n#' # Example 2\n\n\n# Add penalty lambda\nknots = 1:7/8\nd2 = data.frame(x = xp)\n\nfor (i in c(.1, .01, .001, .0001, .00001, .000001)){\n  # fit penalized regression\n  mod2 = prsFit(\n    y = wear,\n    x = x,\n    knots = knots,\n    lambda = i\n  ) \n  # spline choosing lambda\n  Xp = splX(xp, knots) # matrix to map parameters to fitted values at xp\n  LP = Xp %*% coef(mod2)\n  d2[, paste0('lambda = ', i)] = LP[, 1]\n}\n\n#' Examine\n# head(d2)\n\n#' Visualize via ggplot\nd3 = d2 %>%\n  pivot_longer(cols = -x,\n               names_to  = 'lambda',\n               values_to = 'value') %>% \n  mutate(lambda = fct_inorder(lambda))\n\nggplot(d3) +\n  geom_point(aes(x = x, y = wear), col = '#FF5500', data = d) +\n  geom_line(aes(x = x, y = value), col = \"#00AAFF\") +\n  facet_wrap(~lambda) +\n  theme_minimal()\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"visual","theme":"cosmo","title-block-banner":true,"title":"Cubic Splines","author":"Simon-Pierre Boucher","date":"2023-02-11","categories":["R","Code","Cubic Splines"],"image":"https://www.clipartmax.com/png/middle/124-1248944_the-future-of-ai-artificial-intelligence-logo.png"},"extensions":{"book":{"multiFile":true}}}}}