{
  "hash": "f6a77c6cf6e7b8bedb49037af429cbe6",
  "result": {
    "markdown": "---\ntitle: \"Ridge\"\nauthor: \"Simon-Pierre Boucher\"\ndate: \"2023-02-11\"\ncategories: [R, Code, Ridge]\nimage: \"https://www.clipartmax.com/png/middle/124-1248944_the-future-of-ai-artificial-intelligence-logo.png\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nridge <- function(w, X, y, lambda = .1) {\n  # X: model matrix; \n  # y: target; \n  # lambda: penalty parameter; \n  # w: the weights/coefficients\n  \n  crossprod(y - X %*% w) + lambda * length(y) * crossprod(w)\n}\n\n\nset.seed(8675309)\nN = 500\np = 10\nX = scale(matrix(rnorm(N * p), ncol = p))\nb = c(.5, -.5, .25, -.25, .125, -.125, rep(0, 4))\ny = scale(X %*% b + rnorm(N, sd = .5))\n\n#' Note, if `lambda=0`, result is the same as  `lm.fit`.\n#' \n#' \nresult_ridge = optim(\n  rep(0, ncol(X)),\n  ridge,\n  X = X,\n  y = y,\n  lambda = .1,\n  method = 'BFGS'\n)\n\n#' Analytical result.\n#' \nresult_ridge2 =  solve(crossprod(X) + diag(length(y)*.1, ncol(X))) %*% crossprod(X, y)\n\n#' Alternative with augmented data (note sigma ignored as it equals 1, but otherwise\n#' X/sigma and y/sigma).\n#' \nX2 = rbind(X, diag(sqrt(length(y)*.1), ncol(X)))\ny2 = c(y, rep(0, ncol(X)))\nresult_ridge3 = solve(crossprod(X2)) %*% crossprod(X2, y2)\n\n\n\n\n#' `glmnet` is by default a mixture of ridge and lasso penalties, setting alpha\n#' = 1 reduces to lasso, while alpha=0 would be ridge.\n\n\nlibrary(glmnet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLe chargement a nécessité le package : Matrix\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoaded glmnet 4.1-6\n```\n:::\n\n```{.r .cell-code}\nglmnet_res = coef(\n  glmnet(\n    X,\n    y,\n    alpha = 0,\n    lambda = c(10, 1, .1),\n    thresh = 1e-12,\n    intercept = F\n  ), \n  s = .1\n)\n\n#' # Comparison\n\ndata.frame(\n  lm     = coef(lm(y ~ . - 1, data.frame(X))),\n  ridge  = result_ridge$par,\n  ridge2 = result_ridge2,\n  ridge3 = result_ridge3,\n  glmnet = glmnet_res[-1, 1],\n  truth  = b\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              lm        ridge       ridge2       ridge3       glmnet  truth\nX1   0.534988063  0.485323748  0.485323748  0.485323748  0.485368766  0.500\nX2  -0.529993422 -0.480742032 -0.480742032 -0.480742032 -0.480786661 -0.500\nX3   0.234376590  0.209412833  0.209412833  0.209412833  0.209435147  0.250\nX4  -0.294350608 -0.268814168 -0.268814168 -0.268814168 -0.268837476 -0.250\nX5   0.126037566  0.114963716  0.114963716  0.114963716  0.114973801  0.125\nX6  -0.159386728 -0.145880488 -0.145880488 -0.145880488 -0.145892837 -0.125\nX7  -0.016718534 -0.021658889 -0.021658889 -0.021658889 -0.021655033  0.000\nX8   0.009894575  0.006956965  0.006956965  0.006956965  0.006959470  0.000\nX9  -0.005441959  0.001392244  0.001392244  0.001392244  0.001386661  0.000\nX10  0.010561128  0.010985385  0.010985385  0.010985385  0.010985102  0.000\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}