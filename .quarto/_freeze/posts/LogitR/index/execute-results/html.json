{
  "hash": "c340b2275e2f9f5c3337c12fd3f07fdd",
  "result": {
    "markdown": "---\ntitle: \"Logistic regression model\"\nauthor: \"\"\ndate: \"2023-02-13\"\ncategories: [R, Code, Logistic regression, Maximum likelihood method]\nimage: \"https://www.clipartmax.com/png/middle/124-1248944_the-future-of-ai-artificial-intelligence-logo.png\"\n---\n\n\nThis code defines three functions: **`log_likelihood`**, **`optimize_log_likelihood`**, and **`predict`**. The **`log_likelihood`** function takes three matrices **`beta`**, **`X`**, and **`y`** as input and returns the log-likelihood of the logistic regression model. The **`optimize_log_likelihood`** function takes an initial guess for the parameters **`beta`** and two matrices **`X`** and **`y`** as input and returns the maximum likelihood estimates for the parameters. The **`predict`** function takes the estimated parameters **`beta_hat`** and a design matrix **`X`** and returns the predicted probabilities of the outcome.\n\nIn this example, we generate some example data using the **`rnorm`** and **`rbinom`** functions, and then use the **`optimize_log_likelihood`** function to estimate the parameters of the logistic regression model using the maximum likelihood method. Finally, we use the **`predict`** function to get the predicted probabilities of the outcome.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the log-likelihood function\nlog_likelihood <- function(beta, X, y) {\n  n <- length(y)\n  p <- 1 / (1 + exp(-X %*% beta))\n  log_likelihood <- sum(y * log(p) + (1 - y) * log(1 - p))\n  return(-log_likelihood)\n}\n\n# Define the function to optimize the log-likelihood function\noptimize_log_likelihood <- function(beta, X, y) {\n  result <- optim(beta, log_likelihood, X = X, y = y, method = \"BFGS\")\n  beta_hat <- result$par\n  return(beta_hat)\n}\n\n# Define the function to predict the output\npredict <- function(beta_hat, X) {\n  p <- 1 / (1 + exp(-X %*% beta_hat))\n  return(p)\n}\n\n# Generate some example data\nset.seed(123)\nn <- 100\np <- 5\nX <- matrix(rnorm(n * p), nrow = n)\ncolnames(X) <- paste0(\"X\", 1:p)\nX <- cbind(1, X)\nbeta <- rnorm(p + 1)\ny <- rbinom(n, size = 1, prob = 1 / (1 + exp(-X %*% beta)))\n\n# Estimate the parameters\nbeta_init <- rep(0, p + 1)\nbeta_hat <- optimize_log_likelihood(beta_init, X, y)\n\n# Predict the output\np_hat <- predict(beta_hat, X)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}